import cv2
import numpy as np
import mediapipe as mp
import screen_brightness_control as sbc
from math import hypot
from pycaw.pycaw import AudioUtilities, IAudioEndpointVolume
from ctypes import cast, POINTER
from comtypes import CLSCTX_ALL
import logging
from dataclasses import dataclass
from typing import List, Dict, Optional, Tuple, NamedTuple

# Set up logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class HandLandmark(NamedTuple):
    id: int
    x: int
    y: int

@dataclass
class HandData:
    control_points: List[HandLandmark]
    middle_finger_y: Optional[float] = None
    middle_finger_x: Optional[float] = None  # Added x-coordinate for middle finger
    wrist_y: Optional[float] = None
    middle_finger_base_y: Optional[float] = None  # Added for better gesture detection

class GestureController:
    THUMB_TIP_ID = 4
    INDEX_TIP_ID = 8
    MIDDLE_TIP_ID = 12
    MIDDLE_BASE_ID = 9  # Base of middle finger
    WRIST_ID = 0
    
    def __init__(self):
        self._init_audio_controls()
        self._init_mediapipe()
        self._init_camera()
        self._init_state()

    def _init_audio_controls(self):
        """Initialize audio device controls"""
        try:
            devices = AudioUtilities.GetSpeakers()
            interface = devices.Activate(IAudioEndpointVolume._iid_, CLSCTX_ALL, None)
            self.volume = cast(interface, POINTER(IAudioEndpointVolume))
            self.min_vol, self.max_vol, _ = self.volume.GetVolumeRange()
        except Exception as e:
            logger.error(f"Failed to initialize audio controls: {e}")
            raise

    def _init_mediapipe(self):
        """Initialize MediaPipe components"""
        self.mp_hands = mp.solutions.hands
        self.hands = self.mp_hands.Hands(
            static_image_mode=False,
            model_complexity=1,
            min_detection_confidence=0.75,
            min_tracking_confidence=0.75,
            max_num_hands=2
        )
        self.draw = mp.solutions.drawing_utils

    def _init_camera(self):
        """Initialize video capture"""
        self.cap = cv2.VideoCapture(0)
        if not self.cap.isOpened():
            raise RuntimeError("Failed to open webcam")

    def _init_state(self):
        """Initialize state variables"""
        self.control_state = {
            'brightness': {
                'locked': False,
                'value': None,
                'middle_was_up': False,
                'lock_position': None  # Store position for lock indicator
            },
            'volume': {
                'locked': False,
                'value': None,
                'middle_was_up': False,
                'lock_position': None  # Store position for lock indicator
            }
        }

    def get_hand_landmarks(self, frame: np.ndarray, processed) -> Tuple[HandData, HandData]:
        """Extract landmarks for both hands with handedness information"""
        left_data = HandData(control_points=[])
        right_data = HandData(control_points=[])
        
        if processed.multi_hand_landmarks and processed.multi_handedness:
            height, width, _ = frame.shape
            
            for handlm, handedness in zip(processed.multi_hand_landmarks, processed.multi_handedness):
                hand_type = handedness.classification[0].label
                curr_data = HandData(control_points=[])
                
                # Process landmarks
                for lid, lm in enumerate(handlm.landmark):
                    x, y = int(lm.x * width), int(lm.y * height)
                    
                    if lid in [self.THUMB_TIP_ID, self.INDEX_TIP_ID]:
                        curr_data.control_points.append(HandLandmark(lid, x, y))
                    elif lid == self.MIDDLE_TIP_ID:
                        curr_data.middle_finger_y = y
                        curr_data.middle_finger_x = x
                    elif lid == self.MIDDLE_BASE_ID:
                        curr_data.middle_finger_base_y = y
                    elif lid == self.WRIST_ID:
                        curr_data.wrist_y = y
                
                # Assign data to correct hand
                if hand_type == "Left":
                    left_data = curr_data
                else:
                    right_data = curr_data
                
                self.draw.draw_landmarks(frame, handlm, self.mp_hands.HAND_CONNECTIONS)
        
        return left_data, right_data

    def is_middle_finger_up(self, hand_data: HandData, threshold: int = 50) -> bool:
        """Check if the middle finger is extended upward"""
        if (hand_data.middle_finger_y is not None and 
            hand_data.middle_finger_base_y is not None):
            # Calculate the vertical distance between middle finger tip and base
            distance = hand_data.middle_finger_base_y - hand_data.middle_finger_y
            return distance > threshold
        return False

    def draw_lock_indicator(self, frame: np.ndarray, hand_data: HandData, is_locked: bool):
        """Draw a red square box when middle finger is up or control is locked"""
        if hand_data.middle_finger_x is not None and hand_data.middle_finger_y is not None:
            if is_locked or self.is_middle_finger_up(hand_data):
                # Draw a red square around the middle finger tip
                square_size = 30
                x = int(hand_data.middle_finger_x - square_size/2)
                y = int(hand_data.middle_finger_y - square_size/2)
                cv2.rectangle(frame, 
                            (x, y), 
                            (x + square_size, y + square_size), 
                            (0, 0, 255),  # Red color
                            2)  # Thickness

    def calculate_control_value(self, hand_data: HandData, min_val: float, max_val: float,
                              color: Tuple[int, int, int], frame: np.ndarray) -> Optional[float]:
        """Calculate control value based on finger distance"""
        if len(hand_data.control_points) < 2:
            return None
            
        p1, p2 = hand_data.control_points[:2]
        
        # Draw visualization
        cv2.circle(frame, (p1.x, p1.y), 7, color, cv2.FILLED)
        cv2.circle(frame, (p2.x, p2.y), 7, color, cv2.FILLED)
        cv2.line(frame, (p1.x, p1.y), (p2.x, p2.y), color, 3)
        
        distance = hypot(p2.x - p1.x, p2.y - p1.y)
        return np.interp(distance, [50, 220], [min_val, max_val])

    def update_brightness(self, frame: np.ndarray, hand_data: HandData):
        """Update system brightness based on gesture"""
        if not hand_data.control_points:
            return

        state = self.control_state['brightness']
        middle_up = self.is_middle_finger_up(hand_data)
        
        # Handle lock toggle
        if middle_up and not state['middle_was_up']:
            state['locked'] = not state['locked']
            if state['locked']:
                # Store current value when locking
                brightness = self.calculate_control_value(hand_data, 0, 100, (0, 255, 255), frame)
                if brightness is not None:
                    state['value'] = brightness

        state['middle_was_up'] = middle_up

        # Draw lock indicator
        self.draw_lock_indicator(frame, hand_data, state['locked'])

        try:
            if not state['locked']:
                brightness = self.calculate_control_value(hand_data, 0, 100, (0, 255, 255), frame)
                if brightness is not None:
                    sbc.set_brightness(int(brightness))
                    state['value'] = brightness
                    self._draw_control_text(frame, "Brightness", brightness, False, (0, 255, 255))
            elif state['value'] is not None:
                sbc.set_brightness(int(state['value']))
                self._draw_control_text(frame, "Brightness", state['value'], True, (0, 255, 255))
        except Exception as e:
            logger.warning(f"Brightness control error: {e}")

    def update_volume(self, frame: np.ndarray, hand_data: HandData):
        """Update system volume based on gesture"""
        if not hand_data.control_points:
            return

        state = self.control_state['volume']
        middle_up = self.is_middle_finger_up(hand_data)
        
        # Handle lock toggle
        if middle_up and not state['middle_was_up']:
            state['locked'] = not state['locked']
            if state['locked']:
                # Store current value when locking
                volume_level = self.calculate_control_value(hand_data, self.min_vol, self.max_vol, (0, 255, 0), frame)
                if volume_level is not None:
                    state['value'] = volume_level

        state['middle_was_up'] = middle_up

        # Draw lock indicator
        self.draw_lock_indicator(frame, hand_data, state['locked'])

        try:
            if not state['locked']:
                volume_level = self.calculate_control_value(hand_data, self.min_vol, self.max_vol, (0, 255, 0), frame)
                if volume_level is not None:
                    self.volume.SetMasterVolumeLevel(volume_level, None)
                    state['value'] = volume_level
                    volume_percent = int(np.interp(volume_level, [self.min_vol, self.max_vol], [0, 100]))
                    self._draw_control_text(frame, "Volume", volume_percent, False, (0, 255, 0))
            elif state['value'] is not None:
                self.volume.SetMasterVolumeLevel(state['value'], None)
                volume_percent = int(np.interp(state['value'], [self.min_vol, self.max_vol], [0, 100]))
                self._draw_control_text(frame, "Volume", volume_percent, True, (0, 255, 0))
        except Exception as e:
            logger.warning(f"Volume control error: {e}")

    def _draw_control_text(self, frame: np.ndarray, control_type: str, value: float, 
                          is_locked: bool, color: Tuple[int, int, int]):
        """Draw control information on frame"""
        status = "LOCKED" if is_locked else "Controlling"
        cv2.putText(frame, f"{control_type} {status}", (frame.shape[1] - 400, 30 if control_type == "Brightness" else 70),
                   cv2.FONT_HERSHEY_SIMPLEX, 1, color, 2)
        cv2.putText(frame, f"{control_type}: {int(value)}%", (10, 70 if control_type == "Brightness" else 110),
                   cv2.FONT_HERSHEY_SIMPLEX, 1, color, 2)

    def run(self):
        """Main control loop"""
        try:
            while True:
                ret, frame = self.cap.read()
                if not ret:
                    logger.error("Failed to read frame from camera")
                    break

                frame = cv2.flip(frame, 1)  # Mirror frame
                processed = self.hands.process(cv2.cvtColor(frame, cv2.COLOR_BGR2RGB))
                
                # Process hands and update controls
                left_hand, right_hand = self.get_hand_landmarks(frame, processed)
                self.update_brightness(frame, left_hand)
                self.update_volume(frame, right_hand)

                cv2.imshow('Gesture Control', frame)
                if cv2.waitKey(1) & 0xFF == ord('q'):
                    break

        finally:
            self.cleanup()

    def cleanup(self):
        """Release resources"""
        self.cap.release()
        cv2.destroyAllWindows()

if __name__ == '__main__':
    try:
        controller = GestureController()
        controller.run()
    except Exception as e:
        logger.error(f"Application error: {e}")
